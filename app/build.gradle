apply plugin: 'com.android.application'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.bindo.bindoalpha"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 102
        versionName "1.0.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // 必须要保证所有的flavor 都属于同一个维度
        flavorDimensions "default"
    }
    signingConfigs {
        releaseConfig {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            minifyEnabled true  //是否启动混淆 ture:打开，false:关闭
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
        debug {
            minifyEnabled false
        }
    }
    productFlavors {
        ryoyuhk {
            versionCode 103
            versionName "1.0.3"
            applicationId 'com.bindo.ryoyuhk'
            buildConfigField("String", "baseUrl", "\"https://ryoyuhk.gobindo.com\"")
        }
        dockyard {
            versionCode 101
            versionName "1.0.1"
            applicationId 'com.bindo.dockyard'
            buildConfigField("String", "baseUrl", "\"https://dockyard.alpha.gobindo.com\"")
        }
        bindoalpha {
            versionCode 100
            versionName "1.0.0"
            applicationId 'com.bindo.bindoalpha'
            buildConfigField("String", "baseUrl", "\"https://alpha.stg.gobindo.com\"")
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name.equals('release')) {
                variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apk/" + variant.flavorName + "/release")
                def fileName = "app_${variant.flavorName}_release_v${variant.versionName}_${releaseTime()}.apk"
                outputFileName = fileName
            } else if (variant.buildType.name.equals('debug')) {
                variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apk/" + variant.flavorName + "/debug")
                def fileName = "app_${variant.flavorName}_debug_v${variant.versionName}_${releaseTime()}.apk"
                outputFileName = fileName
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}